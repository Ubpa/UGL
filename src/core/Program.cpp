#include <UGL/Program.h>

#include <iostream>

using namespace Ubpa;
using namespace Ubpa::gl;
using namespace std;

Program::Program(const Shader& vs, const Shader& fs) {
	ID = glCreateProgram();

	if (!IsValid()) {
		cerr << "ERROR::Shader::Shader(Type, const GLchar*):" << endl
			<< "  create program fail" << endl
			<< "  - vs path: " << (vsPath->empty() ? "generated by code / empty" : vsPath.get()) << endl
			<< "  - fs path: " << (fsPath->empty() ? "generated by code / empty" : vsPath.get()) << endl
			<< "  - gs path: " << (gsPath->empty() ? "generated by code / empty" : vsPath.get()) << endl;
		return;
	}

	glAttachShader(ID, vs.ID);
	glAttachShader(ID, fs.ID);

	glLinkProgram(ID);

	vsPath = vs.path;
	fsPath = fs.path;
}

bool Program::CheckLinkError() const {
	assert(IsValid());

	GLint success;
	glGetProgramiv(ID, GL_LINK_STATUS, &success);
	if (success)
		return true;

	// link fail
	constexpr GLsizei infoLen = 512;
	GLchar infoLog[infoLen];
	glGetShaderInfoLog(ID, infoLen, NULL, infoLog);
	cerr << "ERROR::Shader::CheckCompileError():" << endl
		<< "  link fail" << endl
		<< "  - vs path: " << (vsPath->empty() ? "generated by code / empty" : vsPath.get()) << endl
		<< "  - fs path: " << (fsPath->empty() ? "generated by code / empty" : vsPath.get()) << endl
		<< "  - gs path: " << (gsPath->empty() ? "generated by code / empty" : vsPath.get()) << endl
		<< "  - info: " << infoLog << endl;
	return false;
}

void Program::Use() const {
	assert(IsValid());
	glUseProgram(ID);
}
