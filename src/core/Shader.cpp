#include <UGL/Shader.h>

#include <iostream>

using namespace Ubpa;
using namespace Ubpa::gl;
using namespace std;

Shader::Shader(ShaderType type)
	: type{ type } { }

Shader::Shader(ShaderType type, const GLchar* src)
	: Obj{ gl::CreateShader(type) }, type { type }
{
	gl::ShaderSource(id, 1, &src, NULL);
	gl::CompileShader(id);

	if (!CheckCompileError())
		Clear();
}

Shader::Shader(Shader&& shader) noexcept
	: Obj{ std::move(shader.id) }, path{ std::move(shader.path) }, type{ shader.type } {}

Shader& Shader::operator=(Shader&& shader) noexcept {
	id = move(shader.id);
	path = move(shader.path);
	return *this;
}

void Shader::Clear() {
	if (IsValid()) {
		gl::DeleteShader(id);
		id.Clear();
	}

	path->clear();
}

Shader::~Shader() {
	Clear();
}

void Shader::Param(ShaderParam pname, GLint* params) const {
	assert(IsValid());
	gl::GetShaderiv(id, pname, params);
}

bool Shader::CheckCompileError() const {
	assert(IsValid());

	GLint success;
	Param(ShaderParam::CompileStatus, &success);
	if (success)
		return true;

	// compile fail
	constexpr GLsizei infoLen = 512;
	GLchar infoLog[infoLen];
	gl::GetShaderInfoLog(id, infoLen, NULL, infoLog);
	cerr << "ERROR::Shader::CheckCompileError():" << endl
		<< "  compile fail" << endl
		<< "  - path: " << (path->empty() ? "generated by code" : path.get()) << endl
		<< "  - info: " << infoLog << endl;
	return false;
}
