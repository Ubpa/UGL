#include <UGL/Shader.h>

#include <iostream>

using namespace Ubpa;
using namespace Ubpa::gl;
using namespace std;

Shader::Shader(Type type, const GLchar* src)
	: type{type}
{
	ID = glCreateShader(static_cast<GLenum>(type));

	if (!IsValid()) {
		cerr << "ERROR::Shader::Shader(Type, const GLchar*):" << endl
			<< "  create shader fail" << endl
			<< "  - path: " << (path->empty() ? "generated by code" : path.get()) << endl;
		return;
	}

	gl::ShaderSource(ID, 1, &src, NULL);
	gl::CompileShader(ID);

	if (!CheckCompileError())
		Clear();
}

Shader::Shader(Shader&& shader) noexcept
	: ID{ shader.ID }, path{ shader.path }, type{ shader.type }
{
	shader.ID = static_cast<GLuint>(0);
	shader.path->clear();
	shader.type = Type::EMPTY;
}

Shader& Shader::operator=(Shader&& shader) noexcept {
	ID = shader.ID;
	path = shader.path;
	shader.ID = static_cast<GLuint>(0);
	shader.path->clear();
	shader.type = Type::EMPTY;
	return *this;
}

void Shader::Clear() {
	gl::DeleteShader(ID);
	ID = static_cast<GLuint>(0);
	path->clear();
	type = Type::EMPTY;
}

Shader::~Shader() {
	Clear();
}

void Shader::Param(ShaderParam pname, GLint* params) const {
	assert(IsValid());
	gl::GetShaderiv(ID, pname, params);
}

bool Shader::CheckCompileError() const {
	assert(IsValid());

	GLint success;
	Param(ShaderParam::CompileStatus, &success);
	if (success)
		return true;

	// compile fail
	constexpr GLsizei infoLen = 512;
	GLchar infoLog[infoLen];
	glGetShaderInfoLog(ID, infoLen, NULL, infoLog);
	cerr << "ERROR::Shader::CheckCompileError():" << endl
		<< "  compile fail" << endl
		<< "  - path: " << (path->empty() ? "generated by code" : path.get()) << endl
		<< "  - info: " << infoLog << endl;
	return false;
}
